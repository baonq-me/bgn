p = 631
a = 1
b = 0
f = x^2 + 1
#F = GF(p)
F.<i> = GF(p^2, modulus=f)
K.<x,y> = F['x,y']

E = EllipticCurve(F,[a,b]) # y^2 = x^3 + x

def phi(P):
    (xP,yP) = P.xy()
    return E((-xP,i*yP))

def vline(P):
    x,y = K.gens()
    R = E.random_element()
    if P + R == R:
        return 0*x + 0*y + 1
    (xP, yP) = P.xy()
    return x - xP

def line(P, Q):
    R = E.random_element()
    x,y = K.gens()
    (xP, yP) = P.xy()
    (xQ, yQ) = Q.xy()
    
    if P == Q:
        if P + R == R:
            return 0*x + 0*y + 1
        if yP == 0:
            return vline(P)
        m = (3*xP^2+a)/(2*yP)
    else:
        if P + R == R:
            return vline(Q)
        if Q + R == R or P == -Q:
            return vline(P)        
        m = (yQ-yP)/(xQ-xP)
    
    return -m*x + y + (-yP + m*xP)

def miller(P, Q, R, n):
    x,y = K.gens()
    S = Q + R
    (xS,yS) = S.xy()
    (xR,yR) = R.xy()
    f = 0*x + 0*y + 1
    T = P
    n = bin(n)[3:]
    m = len(n)
    for i in range(m):
        l = line(T,T)
        v = vline(2*T)
        f = (f*f*l(xS,yS)*v(xR,yR))/(v(xS,yS)*l(xR,yR))
        T = T + T
        if int(n[i]) == 1:
            l = line(T,P)
            v = vline(T+P)
            f = f*(l(xS,yS)*v(xR,yR))/(v(xS,yS)*l(xR,yR))
            T = T+P
    return f

P = E((493, 356))
phiP = E((-493, 356*i))

x = 2
xP = E((164, 227)) #2*P
phixP = E((-164, 227*i))
Q = xP
phiQ = phixP
#xP = E((151, 388)) #3*P
#phixP = E((-151, 388*i))
#R = E.random_element()
#while R == P or R == -Q or R == P - Q or R.order() != 79:
#    R = E.random_element()
#print R
#R = E(124*i + 137, 491*i + 190)
R = E((315*i + 103, 87*i + 239))
#R = E((391, 287))

n = 79
e = (p^2 - 1)/n

g = (vline(P+P)/line(P,P))
#g = (line(P,P)/vline(P+P))
#g = (vline(phiP+phiP)/line(phiP,phiP))
S = phi(P) + R
(xS,yS) = S.xy()
(xR,yR) = R.xy()

h = (vline(2*phi(P))/line(phi(P),phi(P)))
T = P + R
(xT,yT) = T.xy()

print "e(2*P,P) = ", (miller(2*P,phi(P),R,n))/((g(xS,yS)/g(xR,yR))^n)
print "e(P,2*P) = ", (miller(P,2*phi(P),R,n))/((h(xT,yT)/h(xR,yR))^n)
print "e(P,P)^2 = ", (miller(P,phi(P),R,n)^2)

#print (miller(phiP,P,R,n)/miller(P,phiP,R,n))^x
#print (miller(P,phixP,R,n)/miller(phixP,P,R,n))
#F = GF(p)
#E = EllipticCurve(F,[a,b]) # y^2 = x^3 + x
#R = E.random_element()
#while R.order() != 79:
#    R = E.random_element()
#print R

#=========================================
#11/12/17
P = E((450*i + 398, 327*i + 8))
R = 155*P;
U = 7*P;
V = 3*phi(P);